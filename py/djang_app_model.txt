애플리케이션 개발하기-Model 코딩
vi models.py //테이블을 정의한다.
vi admins.py //정의된 테이블이 admin 화면에 보이게 한다.
python manage.py makemigrations //데이터베이스에 변경이 필요한 사항을 추출한다.
python manage.py migrate //데이터베이스에 변경사항을 반영한다.
python manage.py runserver //현재까지 작업을 개발용 웹 서버로 확인한다.


--테이블 정의
앞에서 설계한 것처럼, polls 애플리케이션은 Question과 Choice라는 두 개의 테이블이 필요하다.
테이블은 models.py파일에 정의한다. 앞에서 테이블을 설계한 내용에 따라 다음과 같이 입력한다.
from django.db import models

# Create your models here.
class Question(models.Model):
    question_text = models.CharField(max_length=20)
    pub_date = models.DateTimeField('date published')

    def __str__(self):
        return self.question_text

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

    def __str__(self):
        return self.choice_text
장고에서는 테이블을 하나의 클래스로 정의하고, 테이블의 컬럼은 클래스의 변수(속성) 매핑한다.
테이블 클래스는 django.db.models.Model 클래스를 상속받아 정의하고, 각 클래스 변수의 타입도
장고에서 미리 정의된 필드 클래스를 사용한다.
__str__() 메서드는 객체를 문자열로 표현할 때 사용하는 함수이다. 나중에 보게 될 Admin 사이트나 장고 
쉘 등에서 테이블명을 보여줘야 하는데, 이때 __str__()메서드를 정의하지 않으면 테이블명이 제대로
표시되지 않는다. 참고로 파이썬2에서는 __unicode__() 메서드를 사용함

--Admin 사이트에 테이블 반영하기
Admin 사이트에 접속해보면 현재까지는 장고에서 기본적으로 제공하는 Users, Groups 테이블만 보인다.
이제 models.py 파일에서 정의한 테이블도 Admin 사이트에 보이도록 등록하겠다.
다음처럼 admin.py 파일에 등록해주면 된다.
vi admin.py

--데이터베이스 변경사항 반영
from django.contrib import admin
#from polls.models import Question, Choice
from polls.models import Question, Choice

# Register your models here.
admin.site.register(Question)
admin.site.register(Choice)

테이블의 신규 생성, 테이블의 저으이 변경 등 데이터베이스에 변경이 필요한 사항이 있으면,
이를 데이터베이스에 실제로 반영해주는 작업을 해야 한다.
아직까지는 클래스로 테이블 정의만 변경한 상태이다.
다음 명령으로 데이터베이스에 반영한다.
python manage.py makemigration
python manage.py migrate
마이그레이션(migrations)이란 용어는 장고 1.7 버전부터 사용된 개념으로, 
테이블 및 필드의 생성, 삭제, 변경 등과 같이 데이터베이스에 대한 변경사항을 알려주는 정보이다.
물리적으로는 애플리케이션 디렉토리별로 마이그레이션 파일이 존재한다.
즉 나의 예제에서는 makemigrations명령에 의해 polls/migrations 디렉토리 하위에 마이그레이션
파일들이 생기고, 이 마이그레이션 파일들을 이용해 migrate 명령으로 데이터베이스에 테이블을 만들어 준다.

--지금까지 작업 확인하기
지금까지 데이터베이스 관련 사항을 작업하였다. 즉 models.py 파일에 테이블을 정의하고
이를 데이터베이스에 반여하는 명령을 실행하였다. 또한 테이블을 Admin 사이트에도 등록하였다.
지금까지의 작업이 정상적으로 잘 처리되었는지 확인하기 위해 Admin 사이트에 접속해본다.
python manage.py runserver 0.0.0.0:8000
http://192.168.134.128:8000/admin

로그인 화면에서 createuser명령으로 만든 관리자 username/password를 입력하여 로그인하면
Users, Groups 이외에 내가 추가한 Questions, Choice 테이블을 볼 수 있다.
